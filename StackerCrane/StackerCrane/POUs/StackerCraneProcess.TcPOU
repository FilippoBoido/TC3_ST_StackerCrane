<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.10">
  <POU Name="StackerCraneProcess" Id="{b4bd5f7d-e366-4bba-8281-bae6ed04b2d2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK StackerCraneProcess
VAR_IN_OUT
	bStart : BOOL;
	bHalt : BOOL;
	bResume : BOOL;
	bStop : BOOL;
	fioOutputs : OUTPUTS;
END_VAR
VAR_INPUT
	fioInputs : INPUTS;
	iAlgo: INT;
	iMode: INT;
END_VAR
VAR_OUTPUT
	sCurrentOperation : STRING;
	iTotalPalletsProcessed : INT;
	iPalletsInRack : INT;
	aSlots : ARRAY[1..54] OF BOOL;

END_VAR
VAR
	iStep : INT;
	startTrig : R_TRIG;
	stopTrig : R_TRIG;
	resumeTrig : R_TRIG;
	haltTrig : R_TRIG;
	iHaltStep : INT;
	mAlgo : INT;
	mMode : INT;
	i : INT;
	iChosenSlot : INT;
	fill : Fill;
	empty : Empty;
	iCounter :INT;
	exitTimer : TON;
END_VAR

VAR CONSTANT
	AVAILABLE_SLOTS: INT := 54;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[startTrig(CLK:=bStart);
stopTrig(CLK:=bStop);
resumeTrig(CLK:=bResume);
haltTrig(CLK:=bHalt);
exitTimer(PT:=T#5S);

fill(
	fioOutputs:=fioOutputs,
	iPalletsInRack:=iPalletsInRack,
	sCurrentOperation:=sCurrentOperation,
	aSlots:=aSlots,
	fioInputs:=fioInputs);
	
empty(
	fioOutputs:=fioOutputs,
	iPalletsInRack:=iPalletsInRack,
	sCurrentOperation:=sCurrentOperation,
	aSlots:=aSlots,
	fioInputs:=fioInputs);	
	
IF startTrig.Q 
	AND iStep = 0
	THEN
	resetInputs();
	mAlgo := iAlgo;
	mMode := iMode;
	iStep := 10;
END_IF

IF resumeTrig.Q 
	AND iStep  = 1000
	THEN
	resetInputs();
	iStep := iHaltStep;	
END_IF

IF haltTrig.Q
	THEN
	resetInputs();
	iHaltStep := iStep;
	iStep := 1000;	
END_IF

IF stopTrig.Q
	THEN
	resetInputs();
	exitTimer.IN := FALSE;
	iStep :=  2000;
END_IF

CASE iStep OF
	0:
	 	sCurrentOperation := 'Idle';
		resetInputs();

	10: 
		IF mMode = 1 // Fill
			AND iPalletsInRack < 54
			THEN
			iTotalPalletsProcessed := iTotalPalletsProcessed + 1;
			// Emit Pallet
			fioOutputs.bEmitPallet := TRUE;
			// Start Entry Conveyors
			fioOutputs.bEntryRollerConveyor := TRUE;
			fioOutputs.bEntryLoadingConveyor := TRUE;
			sCurrentOperation := 'Entry Conveyor started';
			iStep := 20;
		ELSIF mMode = 2
			AND iPalletsInRack > 0 // empty
			THEN
			iStep := 60;
			
		ELSE // Not mplemented yet
			iStep := 0;
		END_IF
		
	// ------------------------------------------------------------------------ Fill operation --------------------------------------------------------
	20: // Check Pallet in Loading Conveyor
		IF fioInputs.bEntrySensor
			THEN
			// Stop emitting and stop conveyors
			fioOutputs.bEntryRollerConveyor := FALSE;
			fioOutputs.bEntryLoadingConveyor := FALSE;
			fioOutputs.bEmitPallet := FALSE;	
			iStep := 30;	
		END_IF
		
	30: // Check if space available in rack
		IF iPalletsInRack < AVAILABLE_SLOTS
			THEN
			iStep := 40;
		ELSE
			// Halt operations
			iStep := 1000;
		END_IF
		
	40: // Check algo for fill operation
	
		IF mAlgo = 1 // Sequential
			THEN
			sCurrentOperation := 'Filling sequentially';
			FOR i := 1 TO 54 DO
				IF aSlots[i] = FALSE
					THEN
					iChosenSlot := i;
					EXIT;
				END_IF
			END_FOR
			iStep := 50;
		ELSE
			// Halt operations
			iStep := 1000;
		END_IF
		
	50:
		fill.bStart := TRUE;
		fill.iSlotPosition := iChosenSlot;
		IF fill.bDone THEN
			fill.bStart := FALSE;
			iStep := 0;
		END_IF
		
		
	// ------------------------------------------------------------------------ Empty operation --------------------------------------------------------
	60: //Check algo for empty operation
	
		IF mAlgo = 1 // Sequential
			THEN
			sCurrentOperation := 'Emptying sequentially';
			iCounter := 54;
			WHILE iCounter<>0 DO
				IF aSlots[iCounter] 
					THEN
					iChosenSlot := iCounter;
					EXIT;
				END_IF
    			iCounter := iCounter-1;
			END_WHILE
			
			iStep := 70;
		ELSE
			// Halt operations
			iStep := 1000;
		END_IF
		
	70:
		empty.bStart := TRUE;
		empty.iSlotPosition := iChosenSlot;
		IF empty.bDone THEN
			empty.bStart := FALSE;
			iStep := 80;
		END_IF
		
	80:
		fioOutputs.bExitLoadingConveyor := TRUE;
		fioOutputs.bExitRollerConveyor := TRUE;
		IF fioInputs.bExitSensor
			THEN
			iStep := 90;
		END_IF
		
	90:
		exitTimer.IN := TRUE;
		IF exitTimer.Q
			THEN
			exitTimer.IN := FALSE;
			fioOutputs.bExitLoadingConveyor := FALSE;
			fioOutputs.bExitRollerConveyor := FALSE;
			iStep:=0;
		END_IF
END_CASE
]]></ST>
    </Implementation>
    <Method Name="resetInputs" Id="{7f98eaa7-e02f-48c5-bb0c-20e0578da105}">
      <Declaration><![CDATA[METHOD PRIVATE resetInputs : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bStart := FALSE;
bHalt := FALSE;
bResume := FALSE;
bStop := FALSE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="StackerCraneProcess">
      <LineId Id="797" Count="3" />
      <LineId Id="802" Count="0" />
      <LineId Id="1130" Count="0" />
      <LineId Id="803" Count="0" />
      <LineId Id="1056" Count="1" />
      <LineId Id="1067" Count="0" />
      <LineId Id="1058" Count="1" />
      <LineId Id="1123" Count="0" />
      <LineId Id="1118" Count="4" />
      <LineId Id="1061" Count="0" />
      <LineId Id="1124" Count="0" />
      <LineId Id="804" Count="25" />
      <LineId Id="1129" Count="0" />
      <LineId Id="832" Count="4" />
      <LineId Id="1000" Count="0" />
      <LineId Id="1147" Count="0" />
      <LineId Id="1001" Count="0" />
      <LineId Id="837" Count="1" />
      <LineId Id="1146" Count="0" />
      <LineId Id="839" Count="0" />
      <LineId Id="1046" Count="0" />
      <LineId Id="840" Count="7" />
      <LineId Id="1145" Count="0" />
      <LineId Id="1047" Count="1" />
      <LineId Id="1080" Count="0" />
      <LineId Id="848" Count="27" />
      <LineId Id="997" Count="0" />
      <LineId Id="876" Count="12" />
      <LineId Id="995" Count="0" />
      <LineId Id="1062" Count="0" />
      <LineId Id="1069" Count="0" />
      <LineId Id="1063" Count="0" />
      <LineId Id="1073" Count="0" />
      <LineId Id="1064" Count="1" />
      <LineId Id="1074" Count="0" />
      <LineId Id="1078" Count="0" />
      <LineId Id="1054" Count="0" />
      <LineId Id="1076" Count="0" />
      <LineId Id="1081" Count="0" />
      <LineId Id="1083" Count="2" />
      <LineId Id="1102" Count="0" />
      <LineId Id="1098" Count="0" />
      <LineId Id="1103" Count="0" />
      <LineId Id="1106" Count="2" />
      <LineId Id="1105" Count="0" />
      <LineId Id="1100" Count="0" />
      <LineId Id="1097" Count="0" />
      <LineId Id="1092" Count="4" />
      <LineId Id="1082" Count="0" />
      <LineId Id="1079" Count="0" />
      <LineId Id="1109" Count="5" />
      <LineId Id="1077" Count="0" />
      <LineId Id="1116" Count="1" />
      <LineId Id="1125" Count="0" />
      <LineId Id="1127" Count="0" />
      <LineId Id="1126" Count="0" />
      <LineId Id="1131" Count="0" />
      <LineId Id="1134" Count="0" />
      <LineId Id="1132" Count="0" />
      <LineId Id="1135" Count="4" />
      <LineId Id="1143" Count="0" />
      <LineId Id="1141" Count="1" />
      <LineId Id="1144" Count="0" />
      <LineId Id="1140" Count="0" />
      <LineId Id="996" Count="0" />
      <LineId Id="44" Count="0" />
    </LineIds>
    <LineIds Name="StackerCraneProcess.resetInputs">
      <LineId Id="6" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>